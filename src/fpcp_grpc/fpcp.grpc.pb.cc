// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: fpcp.proto

#include "fpcp.pb.h"
#include "fpcp.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace fpcp {

static const char* SceneProcessorService_method_names[] = {
  "/fpcp.SceneProcessorService/authenticate",
  "/fpcp.SceneProcessorService/onScene",
};

std::unique_ptr< SceneProcessorService::Stub> SceneProcessorService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< SceneProcessorService::Stub> stub(new SceneProcessorService::Stub(channel));
  return stub;
}

SceneProcessorService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_authenticate_(SceneProcessorService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_onScene_(SceneProcessorService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SceneProcessorService::Stub::authenticate(::grpc::ClientContext* context, const ::fpcp::AuthToken& request, ::fpcp::Void* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_authenticate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::fpcp::Void>* SceneProcessorService::Stub::AsyncauthenticateRaw(::grpc::ClientContext* context, const ::fpcp::AuthToken& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::fpcp::Void>::Create(channel_.get(), cq, rpcmethod_authenticate_, context, request);
}

::grpc::Status SceneProcessorService::Stub::onScene(::grpc::ClientContext* context, const ::fpcp::Scene& request, ::fpcp::Void* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_onScene_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::fpcp::Void>* SceneProcessorService::Stub::AsynconSceneRaw(::grpc::ClientContext* context, const ::fpcp::Scene& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::fpcp::Void>::Create(channel_.get(), cq, rpcmethod_onScene_, context, request);
}

SceneProcessorService::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      SceneProcessorService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SceneProcessorService::Service, ::fpcp::AuthToken, ::fpcp::Void>(
          std::mem_fn(&SceneProcessorService::Service::authenticate), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SceneProcessorService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SceneProcessorService::Service, ::fpcp::Scene, ::fpcp::Void>(
          std::mem_fn(&SceneProcessorService::Service::onScene), this)));
}

SceneProcessorService::Service::~Service() {
}

::grpc::Status SceneProcessorService::Service::authenticate(::grpc::ServerContext* context, const ::fpcp::AuthToken* request, ::fpcp::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SceneProcessorService::Service::onScene(::grpc::ServerContext* context, const ::fpcp::Scene* request, ::fpcp::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace fpcp

