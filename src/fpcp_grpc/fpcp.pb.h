// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fpcp.proto

#ifndef PROTOBUF_fpcp_2eproto__INCLUDED
#define PROTOBUF_fpcp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace fpcp {
class AuthToken;
class AuthTokenDefaultTypeInternal;
extern AuthTokenDefaultTypeInternal _AuthToken_default_instance_;
class Face;
class FaceDefaultTypeInternal;
extern FaceDefaultTypeInternal _Face_default_instance_;
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class Picture;
class PictureDefaultTypeInternal;
extern PictureDefaultTypeInternal _Picture_default_instance_;
class Rectangle;
class RectangleDefaultTypeInternal;
extern RectangleDefaultTypeInternal _Rectangle_default_instance_;
class Scene;
class SceneDefaultTypeInternal;
extern SceneDefaultTypeInternal _Scene_default_instance_;
class Size;
class SizeDefaultTypeInternal;
extern SizeDefaultTypeInternal _Size_default_instance_;
class Void;
class VoidDefaultTypeInternal;
extern VoidDefaultTypeInternal _Void_default_instance_;
}  // namespace fpcp

namespace fpcp {

namespace protobuf_fpcp_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_fpcp_2eproto

enum Picture_Format {
  Picture_Format_RAW = 0,
  Picture_Format_PNG = 1,
  Picture_Format_JPG = 2,
  Picture_Format_Picture_Format_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Picture_Format_Picture_Format_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Picture_Format_IsValid(int value);
const Picture_Format Picture_Format_Format_MIN = Picture_Format_RAW;
const Picture_Format Picture_Format_Format_MAX = Picture_Format_JPG;
const int Picture_Format_Format_ARRAYSIZE = Picture_Format_Format_MAX + 1;

const ::google::protobuf::EnumDescriptor* Picture_Format_descriptor();
inline const ::std::string& Picture_Format_Name(Picture_Format value) {
  return ::google::protobuf::internal::NameOfEnum(
    Picture_Format_descriptor(), value);
}
inline bool Picture_Format_Parse(
    const ::std::string& name, Picture_Format* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Picture_Format>(
    Picture_Format_descriptor(), name, value);
}
// ===================================================================

class Void : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fpcp.Void) */ {
 public:
  Void();
  virtual ~Void();

  Void(const Void& from);

  inline Void& operator=(const Void& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Void& default_instance();

  static inline const Void* internal_default_instance() {
    return reinterpret_cast<const Void*>(
               &_Void_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Void* other);

  // implements Message ----------------------------------------------

  inline Void* New() const PROTOBUF_FINAL { return New(NULL); }

  Void* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Void& from);
  void MergeFrom(const Void& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Void* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:fpcp.Void)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_fpcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Size : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fpcp.Size) */ {
 public:
  Size();
  virtual ~Size();

  Size(const Size& from);

  inline Size& operator=(const Size& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Size& default_instance();

  static inline const Size* internal_default_instance() {
    return reinterpret_cast<const Size*>(
               &_Size_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Size* other);

  // implements Message ----------------------------------------------

  inline Size* New() const PROTOBUF_FINAL { return New(NULL); }

  Size* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Size& from);
  void MergeFrom(const Size& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Size* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fpcp.Size)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  mutable int _cached_size_;
  friend struct protobuf_fpcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Rectangle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fpcp.Rectangle) */ {
 public:
  Rectangle();
  virtual ~Rectangle();

  Rectangle(const Rectangle& from);

  inline Rectangle& operator=(const Rectangle& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rectangle& default_instance();

  static inline const Rectangle* internal_default_instance() {
    return reinterpret_cast<const Rectangle*>(
               &_Rectangle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Rectangle* other);

  // implements Message ----------------------------------------------

  inline Rectangle* New() const PROTOBUF_FINAL { return New(NULL); }

  Rectangle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Rectangle& from);
  void MergeFrom(const Rectangle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Rectangle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 left = 1;
  void clear_left();
  static const int kLeftFieldNumber = 1;
  ::google::protobuf::int32 left() const;
  void set_left(::google::protobuf::int32 value);

  // int32 top = 2;
  void clear_top();
  static const int kTopFieldNumber = 2;
  ::google::protobuf::int32 top() const;
  void set_top(::google::protobuf::int32 value);

  // int32 right = 3;
  void clear_right();
  static const int kRightFieldNumber = 3;
  ::google::protobuf::int32 right() const;
  void set_right(::google::protobuf::int32 value);

  // int32 bottom = 4;
  void clear_bottom();
  static const int kBottomFieldNumber = 4;
  ::google::protobuf::int32 bottom() const;
  void set_bottom(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fpcp.Rectangle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 left_;
  ::google::protobuf::int32 top_;
  ::google::protobuf::int32 right_;
  ::google::protobuf::int32 bottom_;
  mutable int _cached_size_;
  friend struct protobuf_fpcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthToken : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fpcp.AuthToken) */ {
 public:
  AuthToken();
  virtual ~AuthToken();

  AuthToken(const AuthToken& from);

  inline AuthToken& operator=(const AuthToken& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthToken& default_instance();

  static inline const AuthToken* internal_default_instance() {
    return reinterpret_cast<const AuthToken*>(
               &_AuthToken_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(AuthToken* other);

  // implements Message ----------------------------------------------

  inline AuthToken* New() const PROTOBUF_FINAL { return New(NULL); }

  AuthToken* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AuthToken& from);
  void MergeFrom(const AuthToken& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AuthToken* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string access = 1;
  void clear_access();
  static const int kAccessFieldNumber = 1;
  const ::std::string& access() const;
  void set_access(const ::std::string& value);
  #if LANG_CXX11
  void set_access(::std::string&& value);
  #endif
  void set_access(const char* value);
  void set_access(const char* value, size_t size);
  ::std::string* mutable_access();
  ::std::string* release_access();
  void set_allocated_access(::std::string* access);

  // string secret = 2;
  void clear_secret();
  static const int kSecretFieldNumber = 2;
  const ::std::string& secret() const;
  void set_secret(const ::std::string& value);
  #if LANG_CXX11
  void set_secret(::std::string&& value);
  #endif
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  ::std::string* mutable_secret();
  ::std::string* release_secret();
  void set_allocated_secret(::std::string* secret);

  // @@protoc_insertion_point(class_scope:fpcp.AuthToken)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr access_;
  ::google::protobuf::internal::ArenaStringPtr secret_;
  mutable int _cached_size_;
  friend struct protobuf_fpcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Scene : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fpcp.Scene) */ {
 public:
  Scene();
  virtual ~Scene();

  Scene(const Scene& from);

  inline Scene& operator=(const Scene& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Scene& default_instance();

  static inline const Scene* internal_default_instance() {
    return reinterpret_cast<const Scene*>(
               &_Scene_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Scene* other);

  // implements Message ----------------------------------------------

  inline Scene* New() const PROTOBUF_FINAL { return New(NULL); }

  Scene* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Scene& from);
  void MergeFrom(const Scene& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Scene* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fpcp.Face faces = 5;
  int faces_size() const;
  void clear_faces();
  static const int kFacesFieldNumber = 5;
  const ::fpcp::Face& faces(int index) const;
  ::fpcp::Face* mutable_faces(int index);
  ::fpcp::Face* add_faces();
  ::google::protobuf::RepeatedPtrField< ::fpcp::Face >*
      mutable_faces();
  const ::google::protobuf::RepeatedPtrField< ::fpcp::Face >&
      faces() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .fpcp.Frame frame = 4;
  bool has_frame() const;
  void clear_frame();
  static const int kFrameFieldNumber = 4;
  const ::fpcp::Frame& frame() const;
  ::fpcp::Frame* mutable_frame();
  ::fpcp::Frame* release_frame();
  void set_allocated_frame(::fpcp::Frame* frame);

  // uint64 since = 2;
  void clear_since();
  static const int kSinceFieldNumber = 2;
  ::google::protobuf::uint64 since() const;
  void set_since(::google::protobuf::uint64 value);

  // int32 persons = 3;
  void clear_persons();
  static const int kPersonsFieldNumber = 3;
  ::google::protobuf::int32 persons() const;
  void set_persons(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fpcp.Scene)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::fpcp::Face > faces_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::fpcp::Frame* frame_;
  ::google::protobuf::uint64 since_;
  ::google::protobuf::int32 persons_;
  mutable int _cached_size_;
  friend struct protobuf_fpcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Frame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fpcp.Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Frame& default_instance();

  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Frame* other);

  // implements Message ----------------------------------------------

  inline Frame* New() const PROTOBUF_FINAL { return New(NULL); }

  Frame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Frame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fpcp.Picture pictures = 4;
  int pictures_size() const;
  void clear_pictures();
  static const int kPicturesFieldNumber = 4;
  const ::fpcp::Picture& pictures(int index) const;
  ::fpcp::Picture* mutable_pictures(int index);
  ::fpcp::Picture* add_pictures();
  ::google::protobuf::RepeatedPtrField< ::fpcp::Picture >*
      mutable_pictures();
  const ::google::protobuf::RepeatedPtrField< ::fpcp::Picture >&
      pictures() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .fpcp.Size size = 3;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  const ::fpcp::Size& size() const;
  ::fpcp::Size* mutable_size();
  ::fpcp::Size* release_size();
  void set_allocated_size(::fpcp::Size* size);

  // uint64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fpcp.Frame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::fpcp::Picture > pictures_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::fpcp::Size* size_;
  ::google::protobuf::uint64 timestamp_;
  mutable int _cached_size_;
  friend struct protobuf_fpcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Face : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fpcp.Face) */ {
 public:
  Face();
  virtual ~Face();

  Face(const Face& from);

  inline Face& operator=(const Face& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Face& default_instance();

  static inline const Face* internal_default_instance() {
    return reinterpret_cast<const Face*>(
               &_Face_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Face* other);

  // implements Message ----------------------------------------------

  inline Face* New() const PROTOBUF_FINAL { return New(NULL); }

  Face* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Face& from);
  void MergeFrom(const Face& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Face* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float vector = 3;
  int vector_size() const;
  void clear_vector();
  static const int kVectorFieldNumber = 3;
  float vector(int index) const;
  void set_vector(int index, float value);
  void add_vector(float value);
  const ::google::protobuf::RepeatedField< float >&
      vector() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_vector();

  // repeated .fpcp.Picture pictures = 4;
  int pictures_size() const;
  void clear_pictures();
  static const int kPicturesFieldNumber = 4;
  const ::fpcp::Picture& pictures(int index) const;
  ::fpcp::Picture* mutable_pictures(int index);
  ::fpcp::Picture* add_pictures();
  ::google::protobuf::RepeatedPtrField< ::fpcp::Picture >*
      mutable_pictures();
  const ::google::protobuf::RepeatedPtrField< ::fpcp::Picture >&
      pictures() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .fpcp.Rectangle rect = 2;
  bool has_rect() const;
  void clear_rect();
  static const int kRectFieldNumber = 2;
  const ::fpcp::Rectangle& rect() const;
  ::fpcp::Rectangle* mutable_rect();
  ::fpcp::Rectangle* release_rect();
  void set_allocated_rect(::fpcp::Rectangle* rect);

  // @@protoc_insertion_point(class_scope:fpcp.Face)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > vector_;
  mutable int _vector_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::fpcp::Picture > pictures_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::fpcp::Rectangle* rect_;
  mutable int _cached_size_;
  friend struct protobuf_fpcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Picture : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fpcp.Picture) */ {
 public:
  Picture();
  virtual ~Picture();

  Picture(const Picture& from);

  inline Picture& operator=(const Picture& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Picture& default_instance();

  static inline const Picture* internal_default_instance() {
    return reinterpret_cast<const Picture*>(
               &_Picture_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Picture* other);

  // implements Message ----------------------------------------------

  inline Picture* New() const PROTOBUF_FINAL { return New(NULL); }

  Picture* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Picture& from);
  void MergeFrom(const Picture& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Picture* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Picture_Format Format;
  static const Format RAW =
    Picture_Format_RAW;
  static const Format PNG =
    Picture_Format_PNG;
  static const Format JPG =
    Picture_Format_JPG;
  static inline bool Format_IsValid(int value) {
    return Picture_Format_IsValid(value);
  }
  static const Format Format_MIN =
    Picture_Format_Format_MIN;
  static const Format Format_MAX =
    Picture_Format_Format_MAX;
  static const int Format_ARRAYSIZE =
    Picture_Format_Format_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Format_descriptor() {
    return Picture_Format_descriptor();
  }
  static inline const ::std::string& Format_Name(Format value) {
    return Picture_Format_Name(value);
  }
  static inline bool Format_Parse(const ::std::string& name,
      Format* value) {
    return Picture_Format_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .fpcp.Size size = 1;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 1;
  const ::fpcp::Size& size() const;
  ::fpcp::Size* mutable_size();
  ::fpcp::Size* release_size();
  void set_allocated_size(::fpcp::Size* size);

  // int32 sizeCode = 2;
  void clear_sizecode();
  static const int kSizeCodeFieldNumber = 2;
  ::google::protobuf::int32 sizecode() const;
  void set_sizecode(::google::protobuf::int32 value);

  // .fpcp.Picture.Format format = 3;
  void clear_format();
  static const int kFormatFieldNumber = 3;
  ::fpcp::Picture_Format format() const;
  void set_format(::fpcp::Picture_Format value);

  // @@protoc_insertion_point(class_scope:fpcp.Picture)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::fpcp::Size* size_;
  ::google::protobuf::int32 sizecode_;
  int format_;
  mutable int _cached_size_;
  friend struct protobuf_fpcp_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Void

// -------------------------------------------------------------------

// Size

// uint32 width = 1;
inline void Size::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 Size::width() const {
  // @@protoc_insertion_point(field_get:fpcp.Size.width)
  return width_;
}
inline void Size::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:fpcp.Size.width)
}

// uint32 height = 2;
inline void Size::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 Size::height() const {
  // @@protoc_insertion_point(field_get:fpcp.Size.height)
  return height_;
}
inline void Size::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:fpcp.Size.height)
}

// -------------------------------------------------------------------

// Rectangle

// int32 left = 1;
inline void Rectangle::clear_left() {
  left_ = 0;
}
inline ::google::protobuf::int32 Rectangle::left() const {
  // @@protoc_insertion_point(field_get:fpcp.Rectangle.left)
  return left_;
}
inline void Rectangle::set_left(::google::protobuf::int32 value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:fpcp.Rectangle.left)
}

// int32 top = 2;
inline void Rectangle::clear_top() {
  top_ = 0;
}
inline ::google::protobuf::int32 Rectangle::top() const {
  // @@protoc_insertion_point(field_get:fpcp.Rectangle.top)
  return top_;
}
inline void Rectangle::set_top(::google::protobuf::int32 value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:fpcp.Rectangle.top)
}

// int32 right = 3;
inline void Rectangle::clear_right() {
  right_ = 0;
}
inline ::google::protobuf::int32 Rectangle::right() const {
  // @@protoc_insertion_point(field_get:fpcp.Rectangle.right)
  return right_;
}
inline void Rectangle::set_right(::google::protobuf::int32 value) {
  
  right_ = value;
  // @@protoc_insertion_point(field_set:fpcp.Rectangle.right)
}

// int32 bottom = 4;
inline void Rectangle::clear_bottom() {
  bottom_ = 0;
}
inline ::google::protobuf::int32 Rectangle::bottom() const {
  // @@protoc_insertion_point(field_get:fpcp.Rectangle.bottom)
  return bottom_;
}
inline void Rectangle::set_bottom(::google::protobuf::int32 value) {
  
  bottom_ = value;
  // @@protoc_insertion_point(field_set:fpcp.Rectangle.bottom)
}

// -------------------------------------------------------------------

// AuthToken

// string access = 1;
inline void AuthToken::clear_access() {
  access_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthToken::access() const {
  // @@protoc_insertion_point(field_get:fpcp.AuthToken.access)
  return access_.GetNoArena();
}
inline void AuthToken::set_access(const ::std::string& value) {
  
  access_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fpcp.AuthToken.access)
}
#if LANG_CXX11
inline void AuthToken::set_access(::std::string&& value) {
  
  access_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fpcp.AuthToken.access)
}
#endif
inline void AuthToken::set_access(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  access_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fpcp.AuthToken.access)
}
inline void AuthToken::set_access(const char* value, size_t size) {
  
  access_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fpcp.AuthToken.access)
}
inline ::std::string* AuthToken::mutable_access() {
  
  // @@protoc_insertion_point(field_mutable:fpcp.AuthToken.access)
  return access_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthToken::release_access() {
  // @@protoc_insertion_point(field_release:fpcp.AuthToken.access)
  
  return access_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthToken::set_allocated_access(::std::string* access) {
  if (access != NULL) {
    
  } else {
    
  }
  access_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), access);
  // @@protoc_insertion_point(field_set_allocated:fpcp.AuthToken.access)
}

// string secret = 2;
inline void AuthToken::clear_secret() {
  secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthToken::secret() const {
  // @@protoc_insertion_point(field_get:fpcp.AuthToken.secret)
  return secret_.GetNoArena();
}
inline void AuthToken::set_secret(const ::std::string& value) {
  
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fpcp.AuthToken.secret)
}
#if LANG_CXX11
inline void AuthToken::set_secret(::std::string&& value) {
  
  secret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fpcp.AuthToken.secret)
}
#endif
inline void AuthToken::set_secret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fpcp.AuthToken.secret)
}
inline void AuthToken::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fpcp.AuthToken.secret)
}
inline ::std::string* AuthToken::mutable_secret() {
  
  // @@protoc_insertion_point(field_mutable:fpcp.AuthToken.secret)
  return secret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthToken::release_secret() {
  // @@protoc_insertion_point(field_release:fpcp.AuthToken.secret)
  
  return secret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthToken::set_allocated_secret(::std::string* secret) {
  if (secret != NULL) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:fpcp.AuthToken.secret)
}

// -------------------------------------------------------------------

// Scene

// string id = 1;
inline void Scene::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Scene::id() const {
  // @@protoc_insertion_point(field_get:fpcp.Scene.id)
  return id_.GetNoArena();
}
inline void Scene::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fpcp.Scene.id)
}
#if LANG_CXX11
inline void Scene::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fpcp.Scene.id)
}
#endif
inline void Scene::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fpcp.Scene.id)
}
inline void Scene::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fpcp.Scene.id)
}
inline ::std::string* Scene::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:fpcp.Scene.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Scene::release_id() {
  // @@protoc_insertion_point(field_release:fpcp.Scene.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Scene::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:fpcp.Scene.id)
}

// uint64 since = 2;
inline void Scene::clear_since() {
  since_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Scene::since() const {
  // @@protoc_insertion_point(field_get:fpcp.Scene.since)
  return since_;
}
inline void Scene::set_since(::google::protobuf::uint64 value) {
  
  since_ = value;
  // @@protoc_insertion_point(field_set:fpcp.Scene.since)
}

// int32 persons = 3;
inline void Scene::clear_persons() {
  persons_ = 0;
}
inline ::google::protobuf::int32 Scene::persons() const {
  // @@protoc_insertion_point(field_get:fpcp.Scene.persons)
  return persons_;
}
inline void Scene::set_persons(::google::protobuf::int32 value) {
  
  persons_ = value;
  // @@protoc_insertion_point(field_set:fpcp.Scene.persons)
}

// .fpcp.Frame frame = 4;
inline bool Scene::has_frame() const {
  return this != internal_default_instance() && frame_ != NULL;
}
inline void Scene::clear_frame() {
  if (GetArenaNoVirtual() == NULL && frame_ != NULL) delete frame_;
  frame_ = NULL;
}
inline const ::fpcp::Frame& Scene::frame() const {
  // @@protoc_insertion_point(field_get:fpcp.Scene.frame)
  return frame_ != NULL ? *frame_
                         : *::fpcp::Frame::internal_default_instance();
}
inline ::fpcp::Frame* Scene::mutable_frame() {
  
  if (frame_ == NULL) {
    frame_ = new ::fpcp::Frame;
  }
  // @@protoc_insertion_point(field_mutable:fpcp.Scene.frame)
  return frame_;
}
inline ::fpcp::Frame* Scene::release_frame() {
  // @@protoc_insertion_point(field_release:fpcp.Scene.frame)
  
  ::fpcp::Frame* temp = frame_;
  frame_ = NULL;
  return temp;
}
inline void Scene::set_allocated_frame(::fpcp::Frame* frame) {
  delete frame_;
  frame_ = frame;
  if (frame) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fpcp.Scene.frame)
}

// repeated .fpcp.Face faces = 5;
inline int Scene::faces_size() const {
  return faces_.size();
}
inline void Scene::clear_faces() {
  faces_.Clear();
}
inline const ::fpcp::Face& Scene::faces(int index) const {
  // @@protoc_insertion_point(field_get:fpcp.Scene.faces)
  return faces_.Get(index);
}
inline ::fpcp::Face* Scene::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:fpcp.Scene.faces)
  return faces_.Mutable(index);
}
inline ::fpcp::Face* Scene::add_faces() {
  // @@protoc_insertion_point(field_add:fpcp.Scene.faces)
  return faces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fpcp::Face >*
Scene::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:fpcp.Scene.faces)
  return &faces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fpcp::Face >&
Scene::faces() const {
  // @@protoc_insertion_point(field_list:fpcp.Scene.faces)
  return faces_;
}

// -------------------------------------------------------------------

// Frame

// string id = 1;
inline void Frame::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Frame::id() const {
  // @@protoc_insertion_point(field_get:fpcp.Frame.id)
  return id_.GetNoArena();
}
inline void Frame::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fpcp.Frame.id)
}
#if LANG_CXX11
inline void Frame::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fpcp.Frame.id)
}
#endif
inline void Frame::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fpcp.Frame.id)
}
inline void Frame::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fpcp.Frame.id)
}
inline ::std::string* Frame::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:fpcp.Frame.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Frame::release_id() {
  // @@protoc_insertion_point(field_release:fpcp.Frame.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Frame::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:fpcp.Frame.id)
}

// uint64 timestamp = 2;
inline void Frame::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Frame::timestamp() const {
  // @@protoc_insertion_point(field_get:fpcp.Frame.timestamp)
  return timestamp_;
}
inline void Frame::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:fpcp.Frame.timestamp)
}

// .fpcp.Size size = 3;
inline bool Frame::has_size() const {
  return this != internal_default_instance() && size_ != NULL;
}
inline void Frame::clear_size() {
  if (GetArenaNoVirtual() == NULL && size_ != NULL) delete size_;
  size_ = NULL;
}
inline const ::fpcp::Size& Frame::size() const {
  // @@protoc_insertion_point(field_get:fpcp.Frame.size)
  return size_ != NULL ? *size_
                         : *::fpcp::Size::internal_default_instance();
}
inline ::fpcp::Size* Frame::mutable_size() {
  
  if (size_ == NULL) {
    size_ = new ::fpcp::Size;
  }
  // @@protoc_insertion_point(field_mutable:fpcp.Frame.size)
  return size_;
}
inline ::fpcp::Size* Frame::release_size() {
  // @@protoc_insertion_point(field_release:fpcp.Frame.size)
  
  ::fpcp::Size* temp = size_;
  size_ = NULL;
  return temp;
}
inline void Frame::set_allocated_size(::fpcp::Size* size) {
  delete size_;
  size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fpcp.Frame.size)
}

// repeated .fpcp.Picture pictures = 4;
inline int Frame::pictures_size() const {
  return pictures_.size();
}
inline void Frame::clear_pictures() {
  pictures_.Clear();
}
inline const ::fpcp::Picture& Frame::pictures(int index) const {
  // @@protoc_insertion_point(field_get:fpcp.Frame.pictures)
  return pictures_.Get(index);
}
inline ::fpcp::Picture* Frame::mutable_pictures(int index) {
  // @@protoc_insertion_point(field_mutable:fpcp.Frame.pictures)
  return pictures_.Mutable(index);
}
inline ::fpcp::Picture* Frame::add_pictures() {
  // @@protoc_insertion_point(field_add:fpcp.Frame.pictures)
  return pictures_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fpcp::Picture >*
Frame::mutable_pictures() {
  // @@protoc_insertion_point(field_mutable_list:fpcp.Frame.pictures)
  return &pictures_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fpcp::Picture >&
Frame::pictures() const {
  // @@protoc_insertion_point(field_list:fpcp.Frame.pictures)
  return pictures_;
}

// -------------------------------------------------------------------

// Face

// string id = 1;
inline void Face::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Face::id() const {
  // @@protoc_insertion_point(field_get:fpcp.Face.id)
  return id_.GetNoArena();
}
inline void Face::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fpcp.Face.id)
}
#if LANG_CXX11
inline void Face::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fpcp.Face.id)
}
#endif
inline void Face::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fpcp.Face.id)
}
inline void Face::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fpcp.Face.id)
}
inline ::std::string* Face::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:fpcp.Face.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Face::release_id() {
  // @@protoc_insertion_point(field_release:fpcp.Face.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Face::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:fpcp.Face.id)
}

// .fpcp.Rectangle rect = 2;
inline bool Face::has_rect() const {
  return this != internal_default_instance() && rect_ != NULL;
}
inline void Face::clear_rect() {
  if (GetArenaNoVirtual() == NULL && rect_ != NULL) delete rect_;
  rect_ = NULL;
}
inline const ::fpcp::Rectangle& Face::rect() const {
  // @@protoc_insertion_point(field_get:fpcp.Face.rect)
  return rect_ != NULL ? *rect_
                         : *::fpcp::Rectangle::internal_default_instance();
}
inline ::fpcp::Rectangle* Face::mutable_rect() {
  
  if (rect_ == NULL) {
    rect_ = new ::fpcp::Rectangle;
  }
  // @@protoc_insertion_point(field_mutable:fpcp.Face.rect)
  return rect_;
}
inline ::fpcp::Rectangle* Face::release_rect() {
  // @@protoc_insertion_point(field_release:fpcp.Face.rect)
  
  ::fpcp::Rectangle* temp = rect_;
  rect_ = NULL;
  return temp;
}
inline void Face::set_allocated_rect(::fpcp::Rectangle* rect) {
  delete rect_;
  rect_ = rect;
  if (rect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fpcp.Face.rect)
}

// repeated float vector = 3;
inline int Face::vector_size() const {
  return vector_.size();
}
inline void Face::clear_vector() {
  vector_.Clear();
}
inline float Face::vector(int index) const {
  // @@protoc_insertion_point(field_get:fpcp.Face.vector)
  return vector_.Get(index);
}
inline void Face::set_vector(int index, float value) {
  vector_.Set(index, value);
  // @@protoc_insertion_point(field_set:fpcp.Face.vector)
}
inline void Face::add_vector(float value) {
  vector_.Add(value);
  // @@protoc_insertion_point(field_add:fpcp.Face.vector)
}
inline const ::google::protobuf::RepeatedField< float >&
Face::vector() const {
  // @@protoc_insertion_point(field_list:fpcp.Face.vector)
  return vector_;
}
inline ::google::protobuf::RepeatedField< float >*
Face::mutable_vector() {
  // @@protoc_insertion_point(field_mutable_list:fpcp.Face.vector)
  return &vector_;
}

// repeated .fpcp.Picture pictures = 4;
inline int Face::pictures_size() const {
  return pictures_.size();
}
inline void Face::clear_pictures() {
  pictures_.Clear();
}
inline const ::fpcp::Picture& Face::pictures(int index) const {
  // @@protoc_insertion_point(field_get:fpcp.Face.pictures)
  return pictures_.Get(index);
}
inline ::fpcp::Picture* Face::mutable_pictures(int index) {
  // @@protoc_insertion_point(field_mutable:fpcp.Face.pictures)
  return pictures_.Mutable(index);
}
inline ::fpcp::Picture* Face::add_pictures() {
  // @@protoc_insertion_point(field_add:fpcp.Face.pictures)
  return pictures_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fpcp::Picture >*
Face::mutable_pictures() {
  // @@protoc_insertion_point(field_mutable_list:fpcp.Face.pictures)
  return &pictures_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fpcp::Picture >&
Face::pictures() const {
  // @@protoc_insertion_point(field_list:fpcp.Face.pictures)
  return pictures_;
}

// -------------------------------------------------------------------

// Picture

// .fpcp.Size size = 1;
inline bool Picture::has_size() const {
  return this != internal_default_instance() && size_ != NULL;
}
inline void Picture::clear_size() {
  if (GetArenaNoVirtual() == NULL && size_ != NULL) delete size_;
  size_ = NULL;
}
inline const ::fpcp::Size& Picture::size() const {
  // @@protoc_insertion_point(field_get:fpcp.Picture.size)
  return size_ != NULL ? *size_
                         : *::fpcp::Size::internal_default_instance();
}
inline ::fpcp::Size* Picture::mutable_size() {
  
  if (size_ == NULL) {
    size_ = new ::fpcp::Size;
  }
  // @@protoc_insertion_point(field_mutable:fpcp.Picture.size)
  return size_;
}
inline ::fpcp::Size* Picture::release_size() {
  // @@protoc_insertion_point(field_release:fpcp.Picture.size)
  
  ::fpcp::Size* temp = size_;
  size_ = NULL;
  return temp;
}
inline void Picture::set_allocated_size(::fpcp::Size* size) {
  delete size_;
  size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fpcp.Picture.size)
}

// int32 sizeCode = 2;
inline void Picture::clear_sizecode() {
  sizecode_ = 0;
}
inline ::google::protobuf::int32 Picture::sizecode() const {
  // @@protoc_insertion_point(field_get:fpcp.Picture.sizeCode)
  return sizecode_;
}
inline void Picture::set_sizecode(::google::protobuf::int32 value) {
  
  sizecode_ = value;
  // @@protoc_insertion_point(field_set:fpcp.Picture.sizeCode)
}

// .fpcp.Picture.Format format = 3;
inline void Picture::clear_format() {
  format_ = 0;
}
inline ::fpcp::Picture_Format Picture::format() const {
  // @@protoc_insertion_point(field_get:fpcp.Picture.format)
  return static_cast< ::fpcp::Picture_Format >(format_);
}
inline void Picture::set_format(::fpcp::Picture_Format value) {
  
  format_ = value;
  // @@protoc_insertion_point(field_set:fpcp.Picture.format)
}

// bytes data = 4;
inline void Picture::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Picture::data() const {
  // @@protoc_insertion_point(field_get:fpcp.Picture.data)
  return data_.GetNoArena();
}
inline void Picture::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fpcp.Picture.data)
}
#if LANG_CXX11
inline void Picture::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fpcp.Picture.data)
}
#endif
inline void Picture::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fpcp.Picture.data)
}
inline void Picture::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fpcp.Picture.data)
}
inline ::std::string* Picture::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:fpcp.Picture.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Picture::release_data() {
  // @@protoc_insertion_point(field_release:fpcp.Picture.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Picture::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:fpcp.Picture.data)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace fpcp

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::fpcp::Picture_Format> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fpcp::Picture_Format>() {
  return ::fpcp::Picture_Format_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fpcp_2eproto__INCLUDED
