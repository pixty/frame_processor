// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: fpcp.proto
#ifndef GRPC_fpcp_2eproto__INCLUDED
#define GRPC_fpcp_2eproto__INCLUDED

#include "fpcp.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace fpcp {

// All methods(exception is authenticate()) of SceneProcessorService should be invoked
// with non-null "session_id" (fucking gRPC silently transcode to lowercase!) methadata key value. 
// Session Provider will reject the call if the session_id is not known (invalid) and response 
// appropriate error by "error" key in trailing metadata value. 
// 
// Known "error" trailing values:
// "1" - means "Unknown session id. Authentication requred". Session is not known, or not obtained. Please 
// see authenticate() method call.
// "2" - means "Authentication failed". Invalid credentials provided.
class SceneProcessorService final {
 public:
  static constexpr char const* service_full_name() {
    return "fpcp.SceneProcessorService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Authenticates the client. Server will respond appropriate "session_id" or "error".
    virtual ::grpc::Status authenticate(::grpc::ClientContext* context, const ::fpcp::AuthToken& request, ::fpcp::Void* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fpcp::Void>> Asyncauthenticate(::grpc::ClientContext* context, const ::fpcp::AuthToken& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fpcp::Void>>(AsyncauthenticateRaw(context, request, cq));
    }
    // Sends the client scene information. 
    virtual ::grpc::Status onScene(::grpc::ClientContext* context, const ::fpcp::Scene& request, ::fpcp::Void* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fpcp::Void>> AsynconScene(::grpc::ClientContext* context, const ::fpcp::Scene& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fpcp::Void>>(AsynconSceneRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fpcp::Void>* AsyncauthenticateRaw(::grpc::ClientContext* context, const ::fpcp::AuthToken& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fpcp::Void>* AsynconSceneRaw(::grpc::ClientContext* context, const ::fpcp::Scene& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status authenticate(::grpc::ClientContext* context, const ::fpcp::AuthToken& request, ::fpcp::Void* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fpcp::Void>> Asyncauthenticate(::grpc::ClientContext* context, const ::fpcp::AuthToken& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fpcp::Void>>(AsyncauthenticateRaw(context, request, cq));
    }
    ::grpc::Status onScene(::grpc::ClientContext* context, const ::fpcp::Scene& request, ::fpcp::Void* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fpcp::Void>> AsynconScene(::grpc::ClientContext* context, const ::fpcp::Scene& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fpcp::Void>>(AsynconSceneRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::fpcp::Void>* AsyncauthenticateRaw(::grpc::ClientContext* context, const ::fpcp::AuthToken& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fpcp::Void>* AsynconSceneRaw(::grpc::ClientContext* context, const ::fpcp::Scene& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_authenticate_;
    const ::grpc::RpcMethod rpcmethod_onScene_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Authenticates the client. Server will respond appropriate "session_id" or "error".
    virtual ::grpc::Status authenticate(::grpc::ServerContext* context, const ::fpcp::AuthToken* request, ::fpcp::Void* response);
    // Sends the client scene information. 
    virtual ::grpc::Status onScene(::grpc::ServerContext* context, const ::fpcp::Scene* request, ::fpcp::Void* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_authenticate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status authenticate(::grpc::ServerContext* context, const ::fpcp::AuthToken* request, ::fpcp::Void* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestauthenticate(::grpc::ServerContext* context, ::fpcp::AuthToken* request, ::grpc::ServerAsyncResponseWriter< ::fpcp::Void>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_onScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_onScene() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_onScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status onScene(::grpc::ServerContext* context, const ::fpcp::Scene* request, ::fpcp::Void* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestonScene(::grpc::ServerContext* context, ::fpcp::Scene* request, ::grpc::ServerAsyncResponseWriter< ::fpcp::Void>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_authenticate<WithAsyncMethod_onScene<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_authenticate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status authenticate(::grpc::ServerContext* context, const ::fpcp::AuthToken* request, ::fpcp::Void* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_onScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_onScene() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_onScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status onScene(::grpc::ServerContext* context, const ::fpcp::Scene* request, ::fpcp::Void* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_authenticate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::fpcp::AuthToken, ::fpcp::Void>(std::bind(&WithStreamedUnaryMethod_authenticate<BaseClass>::Streamedauthenticate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status authenticate(::grpc::ServerContext* context, const ::fpcp::AuthToken* request, ::fpcp::Void* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedauthenticate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fpcp::AuthToken,::fpcp::Void>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_onScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_onScene() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::fpcp::Scene, ::fpcp::Void>(std::bind(&WithStreamedUnaryMethod_onScene<BaseClass>::StreamedonScene, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_onScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status onScene(::grpc::ServerContext* context, const ::fpcp::Scene* request, ::fpcp::Void* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedonScene(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fpcp::Scene,::fpcp::Void>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_authenticate<WithStreamedUnaryMethod_onScene<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_authenticate<WithStreamedUnaryMethod_onScene<Service > > StreamedService;
};

}  // namespace fpcp


#endif  // GRPC_fpcp_2eproto__INCLUDED
